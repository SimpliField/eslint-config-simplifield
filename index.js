'use strict';

const OFF = 'off';
const ERROR = 'error';
const WARN = 'warn';

const LINE_MAX_LENGTH = 100;
const TAB_WIDTH = 2;
const MAX_EMPTY_LINES = 2;
const COMPLEXITY_MAX = 6;

module.exports = {
  extends: 'eslint:recommended',
  env: {
    node: true,
    mocha: true,
    es6: true,
  },
  globals: {
    require: false,
    module: false,
  },
  parserOptions: {
    ecmaVersion: 2018,
    sourceType: 'script',
    arrowFunctions: true,
    binaryLiterals: true,
    blockBindings: true,
    classes: false,
    defaultParams: true,
    destructuring: true,
    forOf: true,
    generators: false,
    modules: false,
    objectLiteralComputedProperties: true,
    objectLiteralDuplicateProperties: true,
    objectLiteralShorthandMethods: true,
    objectLiteralShorthandProperties: true,
    octalLiterals: false,
    regexUFlag: true,
    regexYFlag: true,
    restParams: true,
    spread: true,
    superInFunctions: true,
    templateStrings: true,
    unicodeCodePointEscapes: true,
  },
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  rules: {
    'array-callback-return': ERROR,
    'block-scoped-var': ERROR,
    'class-methods-use-this': ERROR,
    'comma-dangle': [
      ERROR,
      {
        arrays: 'only-multiline',
        objects: 'only-multiline',
        imports: 'only-multiline',
        exports: 'only-multiline',
        functions: 'never',
      },
    ],
    'comma-spacing': [ERROR, { before: false, after: true }],
    'comma-style': [ERROR, 'last'],
    complexity: [WARN, COMPLEXITY_MAX],
    'consistent-return': ERROR,
    curly: ERROR,
    'default-case': ERROR,
    'dot-location': [ERROR, 'property'],
    'dot-notation': ERROR,
    eqeqeq: [ERROR, 'smart'],
    'guard-for-in': ERROR,
    'linebreak-style': [ERROR, 'unix'],
    'max-classes-per-file': OFF,
    'max-len': [
      WARN,
      LINE_MAX_LENGTH,
      TAB_WIDTH,
      {
        ignoreComments: true,
        ignorePattern: '^\\s*import\\s.+\\sfrom\\s.+;$',
      },
    ],
    'newline-after-var': ERROR,
    'no-alert': ERROR,
    'no-caller': ERROR,
    'no-case-declarations': ERROR,
    'no-div-regex': OFF,
    'no-else-return': [
      ERROR,
      {
        allowElseIf: false,
      },
    ],
    'no-empty-pattern': ERROR,
    'no-eq-null': OFF,
    'no-eval': ERROR,
    'no-extend-native': ERROR,
    'no-extra-bind': ERROR,
    'no-extra-parens': ERROR,
    'no-fallthrough': ERROR,
    'no-floating-decimal': ERROR,
    'no-global-assign': ERROR,
    'no-native-reassign': OFF,
    'no-implicit-coercion': OFF,
    'no-implicit-globals': OFF,
    'no-implied-eval': ERROR,
    'no-invalid-this': WARN,
    'no-iterator': ERROR,
    'no-labels': ERROR,
    'no-lone-blocks': ERROR,
    'no-loop-func': ERROR,
    'no-mixed-spaces-and-tabs': ERROR,
    'no-multi-spaces': ERROR,
    'no-multi-str': ERROR,
    'no-multiple-empty-lines': [ERROR, { max: MAX_EMPTY_LINES }],
    'no-new': ERROR,
    'no-new-func': ERROR,
    'no-octal': ERROR,
    'no-octal-escape': ERROR,
    'no-param-reassign': OFF,
    'no-proto': ERROR,
    'no-redeclare': ERROR,
    'no-restricted-properties': [
      ERROR,
      {
        object: 'arguments',
        property: 'callee',
        message: 'arguments.callee is deprecated',
      },
      {
        object: 'describe',
        property: 'only',
        message: 'Using describe.only is not allowed',
      },
      {
        object: 'it',
        property: 'only',
        message: 'Using it.only is not allowed',
      },
      {
        object: 'test',
        property: 'only',
        message: 'using test.only is deprecated',
      },
    ],
    'no-return-assign': [ERROR, 'always'],
    'no-return-await': ERROR,
    'no-script-url': ERROR,
    'no-self-assign': ERROR,
    'no-self-compare': ERROR,
    'no-sequences': ERROR,
    'no-throw-literal': ERROR,
    'no-unmodified-loop-condition': OFF,
    'no-unused-expressions': ERROR,
    'no-useless-call': ERROR,
    'no-useless-concat': ERROR,
    'no-useless-escape': WARN,
    'no-useless-return': ERROR,
    'no-void': ERROR,
    'no-warning-comments': OFF,
    'no-with': ERROR,
    'prefer-object-spread': WARN,
    'quote-props': [ERROR, 'as-needed'],
    quotes: [ERROR, 'single', { avoidEscape: true }],
    semi: [ERROR, 'always'],
    'semi-spacing': [ERROR, { before: false, after: true }],
    'semi-style': ERROR,
    radix: ERROR,
    'require-await': WARN,
    'vars-on-top': ERROR,
    'wrap-iife': ERROR,
    yoda: [WARN, 'never'],
  },
  overrides: [
    {
      files: ['*.ts'],
      rules: {
        '@typescript-eslint/array-type': 'warn',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'interface',
            format: ['PascalCase'],
            custom: {
              regex: '^I[A-Z]',
              match: false,
            },
          },
        ],
      },
      extends: ['plugin:@typescript-eslint/recommended'],
    },
  ],
};
